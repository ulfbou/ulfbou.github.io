@using MudBlazor
@using Homepage.Common.Models
@using Homepage.Common.Services
@inject ContentService ContentService
@inject AudienceContextService AudienceService
@inject NavigationManager NavManager

<MudNavMenu>
    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary px-4 py-2">View As:</MudText>
    @if (AudienceService != null)
    {
                                                        <MudRadioGroup T="string" SelectedOption="AudienceService.CurrentAudience" SelectedOptionChanged="OnAudienceOptionChanged"
                                                                       Dense="true" Class="px-4 py-2">
            @foreach (var audience in AudienceService.GetAvailableAudiences())
            {
                                                                                                                <MudRadio T="string" Option="@audience" Color="Color.Primary">@ToTitleCase(audience)</MudRadio>
            }
                                                        </MudRadioGroup>

                                                        <MudDivider Class="my-2" />

                                                        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                                                        <MudNavLink Href="/about" Icon="@Icons.Material.Filled.Info">About Me</MudNavLink>

                                                        <MudNavGroup Title="Content" Icon="@Icons.Material.Filled.Article" Expanded="true">
            @if (_contentMetadata == null)
            {
                                                                                                                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ml-4 my-2" />
            }
            else if (!_contentMetadata.Any())
            {
                                                                                                                <MudText Typo="Typo.body2" Class="ml-4">No content found for this audience.</MudText>
            }
            else
            {
                @foreach (var category in _contentMetadata
        .Where(m => m.TargetAudiences.Contains(AudienceService.CurrentAudience, StringComparer.OrdinalIgnoreCase))
        .SelectMany(m => m.Categories)
        .Distinct()
        .OrderBy(c => c))
                {
                                                                                                                                                                    <MudNavGroup Title="@ToTitleCase(category.Replace("-", " "))" Icon="@Icons.Material.Filled.Folder" Expanded="true">
                        @foreach (var item in _contentMetadata
                .Where(m => m.Categories.Contains(category, StringComparer.OrdinalIgnoreCase) && m.TargetAudiences.Contains(AudienceService.CurrentAudience, StringComparer.OrdinalIgnoreCase))
                .OrderByDescending(m => m.PublishDate))
                        {
                                                                                                                                                                                                                            <MudNavLink Href="@($"/content/{item.Slug}")">
                                @item.Title
                                @if (AudienceService.CurrentAudience == "recruiter" && item.IsFeatured)
                                {
                                                                                                                                                                                                                                                                                    <MudChip T="string" Size="Size.Small" Color="Color.Tertiary" Class="ml-2">Featured</MudChip>
                                }
                                                                                                                                                                                                                            </MudNavLink>
                        }
                                                                                                                                                                    </MudNavGroup>
                }
            }
                                                        </MudNavGroup>

                                                        <MudDivider Class="my-2" />

                                                        <MudNavGroup Title="More" Icon="@Icons.Material.Filled.MoreHoriz" Expanded="false">
                                                            <MudNavLink Href="https://www.linkedin.com/in/ulf-bourelius-a9090248//" Target="_blank" Icon="@Icons.Custom.Brands.LinkedIn">LinkedIn Profile</MudNavLink>
                                                            <MudNavLink Href="https://github.com/ulfbou" Target="_blank" Icon="@Icons.Custom.Brands.GitHub">GitHub Profile</MudNavLink>
                                                        </MudNavGroup>
    }
    </MudNavMenu>

@code {
    private List<ContentMetadata>? _contentMetadata;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to audience changes to re-filter/re-sort content lists if needed
        AudienceService.OnAudienceChanged += OnAudienceChangedHandler;
        await LoadContentMetadata(); // Initial load
    }

    private async void OnAudienceChangedHandler()
    {
        await LoadContentMetadata();
    }

    private async Task LoadContentMetadata()
    {
        _contentMetadata = await ContentService.GetContentMetadataAsync();
        StateHasChanged();
    }

    private void OnAudienceOptionChanged(string newAudience)
    {
        AudienceService.SetAudience(newAudience);
        // No need to call StateHasChanged here, as the event handler in OnInitializedAsync does it.
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        AudienceService.OnAudienceChanged -= OnAudienceChangedHandler;
    }

    // Helper for title case
    private static string ToTitleCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }
}
